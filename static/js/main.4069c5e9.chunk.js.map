{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","App","state","selectedGoods","adder","word","includes","alert","setState","prevState","remover","filter","el","display","arr","length","join","goods","slice","this","AnyGoodSelected","className","type","onClick","map","good","isSelected","classNames","selected","nonSelected","React","Component","ReactDOM","render","document","getElementById"],"mappings":"qQAKMA,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAOIC,E,4MACJC,MAAe,CACbC,cAAe,CAAC,Q,EAGlBC,MAAQ,SAACC,GACH,EAAKH,MAAMC,cAAcG,SAASD,GAEpCE,MAAM,GAAD,OAAIF,EAAJ,sBAKP,EAAKG,UAAS,SAAAC,GAAS,MAAK,CAAEN,cAAc,GAAD,mBAAMM,EAAUN,eAAhB,CAA+BE,S,EAG5EK,QAAU,SAACL,GACT,EAAKG,UAAS,SAAAC,GAAS,MACrB,CAAEN,cAAc,YAAKM,EAAUN,cAAcQ,QAAO,SAAAC,GAAE,OAAIA,IAAOP,W,EAGrEQ,QAAU,SAACC,GACT,GAAmB,IAAfA,EAAIC,OACN,MAAM,GAAN,OAAU,EAAKb,MAAMC,cAAca,KAAK,IAAxC,QAGF,GAAmB,IAAfF,EAAIC,OACN,MAAM,GAAN,OAAU,EAAKb,MAAMC,cAAca,KAAK,SAAxC,SAGF,IAAMC,EAAQ,EAAKf,MAAMC,cAEzB,MACE,UAAGc,EAAMC,MAAM,EAAGD,EAAMF,OAAS,GAAGC,KAAK,OAAzC,eACUC,EAAMC,MAAMD,EAAMF,OAAS,GADrC,U,4CAKJ,WAA2B,IAAD,OAChBZ,EAAkBgB,KAAKjB,MAAvBC,cACFiB,EAAsD,IAApCD,KAAKjB,MAAMC,cAAcY,OAEjD,OACE,sBAAKM,UAAU,MAAf,UACE,qBAAIA,UAAU,QAAd,2BAEG,IACAD,EACC,qCACGD,KAAKN,QAAQV,GADhB,WAGG,IACD,wBACEmB,KAAK,SACLC,QAAS,WACP,EAAKf,SAAS,CAAEL,cAAe,MAHnC,kBAUF,4DAKJ,oBAAIkB,UAAU,OAAd,SACGrB,EAAgBwB,KAAI,SAACC,GACpB,IAAMC,EAAa,EAAKxB,MAAMC,cAAcG,SAASmB,GAErD,OACE,qBAEEJ,UAAWM,IAAW,CACpBC,SAAUF,EACVG,aAAcH,IAJlB,UAOGD,EACA,IACD,wBACEH,KAAK,SACLC,QAAS,WACP,EAAKnB,MAAMqB,IAHf,iBAQCC,GACC,wBACEJ,KAAK,SACLC,QAAS,WACP,EAAKb,QAAQe,IAHjB,sBAjBGA,e,GAzEHK,IAAMC,WA4GT9B,IC/Hf+B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4069c5e9.chunk.js","sourcesContent":["/* eslint-disable no-console */\nimport React from 'react';\nimport './App.scss';\nimport classNames from 'classnames';\n\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ntype State = {\n  selectedGoods: string[];\n};\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedGoods: ['Jam'],\n  };\n\n  adder = (word: string) => {\n    if (this.state.selectedGoods.includes(word)) {\n      // eslint-disable-next-line no-alert\n      alert(`${word} already selected`);\n\n      return;\n    }\n\n    this.setState(prevState => ({ selectedGoods: [...prevState.selectedGoods, word] }));\n  };\n\n  remover = (word: string) => {\n    this.setState(prevState => (\n      { selectedGoods: [...prevState.selectedGoods.filter(el => el !== word)] }));\n  };\n\n  display = (arr: string[]) => {\n    if (arr.length === 1) {\n      return `${this.state.selectedGoods.join('')} is `;\n    }\n\n    if (arr.length === 2) {\n      return `${this.state.selectedGoods.join(' and ')} are `;\n    }\n\n    const goods = this.state.selectedGoods;\n\n    return (\n      `${goods.slice(0, goods.length - 1).join(', ')}`\n      + ` and ${goods.slice(goods.length - 1)} are `\n    );\n  };\n\n  render(): React.ReactNode {\n    const { selectedGoods } = this.state;\n    const AnyGoodSelected = this.state.selectedGoods.length !== 0;\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"title\">\n          Selected good:\n          {' '}\n          {AnyGoodSelected ? (\n            <>\n              {this.display(selectedGoods)}\n              selected\n              {' '}\n              <button\n                type=\"button\"\n                onClick={() => {\n                  this.setState({ selectedGoods: [] });\n                }}\n              >\n                X\n              </button>\n            </>\n          ) : (\n            <>\n              No any selections\n            </>\n          )}\n        </h1>\n        <ul className=\"list\">\n          {goodsFromServer.map((good) => {\n            const isSelected = this.state.selectedGoods.includes(good);\n\n            return (\n              <li\n                key={good}\n                className={classNames({\n                  selected: isSelected,\n                  nonSelected: !isSelected,\n                })}\n              >\n                {good}\n                {' '}\n                <button\n                  type=\"button\"\n                  onClick={() => {\n                    this.adder(good);\n                  }}\n                >\n                  Add\n                </button>\n                {isSelected && (\n                  <button\n                    type=\"button\"\n                    onClick={() => {\n                      this.remover(good);\n                    }}\n                  >\n                    Remove\n                  </button>\n                )}\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}